#!/usr/bin/env node
"use strict";var _require=require("child_process"),execSync=_require.execSync,fs=require("fs"),path=require("path"),fadedProgressbar=require("faded-progressbar"),GitHubApi=require("github"),Promise=require("bluebird"),_require2=require("yargs"),argv=_require2.argv,github=new GitHubApi({protocol:"https",host:"api.github.com",headers:{"user-agent":"git-getter"},Promise:Promise,followRedirects:!1,timeout:5e3}),username=argv.username,_argv$targetPath=argv.targetPath,targetPath=void 0===_argv$targetPath?".":_argv$targetPath,useSSH=argv.ssh;username||(console.log("Please provide the username!"),process.exit()),fs.existsSync(targetPath)&&fs.lstatSync(targetPath).isDirectory()||(console.log("Please provide a valid path!"),process.exit());var addResults=function t(e,a,s){github.getNextPage(e,null,function(e,r){30===r.data.length?t(r,a.concat(r.data),s):s(a.concat(r.data))})},downloadRepos=function(e){var r=e.filter(function(e){return!e.fork});console.log(r.length+" repositories found");var i=fadedProgressbar.newProcess("Downloading repositories",r.length);i.start(),r.forEach(function(e,r){var t=e.name,a=e.clone_url,s=e.ssh_url,o=path.join(targetPath,t);fs.existsSync(o)?console.log("Repository already exists, skipping..."):execSync("git clone "+(useSSH?s:a)+" "+o,{stdio:[0,1,2]}),i.updateProgress(r+1)})};github.repos.getForUser({username:username,type:"owner"},function(e,r){addResults(r,r.data,downloadRepos)});